pipeline TreesPipeline{

    // Using single pipe for better readability
    TreesExtractor
    -> TreesTextFileInterpreter
    -> TreesCSVInterpreter
    -> TreesColumnDeleter
    -> TreesTableInterpreter
    -> TreesLoader;

    // Extracting data from the given URL
    block TreesExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
    }

    // Interpreting the data as text file
    block TreesTextFileInterpreter oftype TextFileInterpreter {
    }

    // Interpreting the text file file as CSV to convert it into a sheet
    block TreesCSVInterpreter oftype CSVInterpreter {
        delimiter: ';';
    }

    block TreesColumnDeleter oftype ColumnDeleter {
        delete: [column E];
    }

    // Interpreting the sheet as a table
    block TreesTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "lfd_nr" oftype integer,
            "stadtteil" oftype validStadtteilName,
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "id" oftype validGeoPoint,
            "baumfamilie" oftype text,
            ];
    }

    // Loading the data into a SQLite database
    block TreesLoader oftype SQLiteLoader {
        table: "trees";
        file: "./trees.sqlite";
    }

}

// Defining constraints for the data so that rows with invalid values can be dropped
constraint StadtteilStartsWithVogelsang oftype RegexConstraint {
regex: /^Vogelsang\b.*/;
}

constraint GeoPointPattern oftype RegexConstraint {
regex: /([0-9]{1,3}\.[0-9]+), ([0-9]{1,3}\.[0-9]+)/;
}

// Defining custome data types by using our defined constraints for our Table Interpreter
valuetype validStadtteilName oftype text {
constraints : [StadtteilStartsWithVogelsang];
} 

valuetype validGeoPoint oftype text {
constraints : [GeoPointPattern];
}